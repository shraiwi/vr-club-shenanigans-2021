[gd_scene load_steps=12 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D mask;



void vertex() {
	
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	vec3 VERTEX2;
	
	VERTEX2 = ( WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
	float dist=sqrt(VERTEX.x*VERTEX.x+VERTEX.z*VERTEX.z);
	vec2 jumble=VERTEX2.xz/vec2(10,10);
	if(dist<35.0){
		VERTEX.y=5.0-dist/7.0 +texture(mask,jumble).r;
	}else if(sqrt(VERTEX.x*VERTEX.x+VERTEX.z*VERTEX.z)<50.0){
		VERTEX.y=2.0-(dist-30.0)/2.0+texture(mask,jumble).r;
	}else{
		VERTEX.y=((dist-30.0)/2.0+texture(mask,jumble).r)/((dist-45.0)/5.0) -18.0;
	}
	
	
	
	//(cos(sqrt(jumble.x*jumble.x+jumble.y*jumble.y)))*(texture(mask,jumble/vec2(5)).r-0.25)*float(10);
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb+(vec3(VERTEX.y,VERTEX.y,VERTEX.y)*0.1);
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"

[sub_resource type="OpenSimplexNoise" id=8]

[sub_resource type="NoiseTexture" id=9]
noise = SubResource( 8 )

[sub_resource type="OpenSimplexNoise" id=10]
seed = 2
period = 0.1
persistence = 1.0
lacunarity = 2.6

[sub_resource type="NoiseTexture" id=11]
width = 2048
height = 2048
bump_strength = 3.8
noise = SubResource( 10 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.894118, 0.992157, 0.580392, 0.109804 )
shader_param/specular = 0.01
shader_param/metallic = 0.01
shader_param/roughness = 0.023
shader_param/point_size = 10.299
shader_param/uv1_scale = Vector3( 25, 25, 1 )
shader_param/uv1_offset = null
shader_param/uv2_scale = Vector3( 1, 1, 0 )
shader_param/uv2_offset = null
shader_param/texture_albedo = SubResource( 11 )
shader_param/mask = SubResource( 9 )

[sub_resource type="PlaneMesh" id=3]
material = SubResource( 2 )
size = Vector2( 300, 300 )
subdivide_width = 200
subdivide_depth = 200

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;





void vertex() {
	
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	vec3 VERTEX2;
	
	VERTEX2 = ( WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;

	vec2 jumble=VERTEX2.xz/vec2(10,10);
	VERTEX.y=1.5+sin(VERTEX.x+VERTEX.z+TIME)/10.0;
	//(cos(sqrt(jumble.x*jumble.x+jumble.y*jumble.y)))*(texture(mask,jumble/vec2(5)).r-0.25)*float(10);
}




void fragment() {
	ALPHA=0.8;
	vec2 base_uv = UV; /* vec2(UV.x+float(int(TIME*20.0)%50)/1200.0,UV.y+float(int(TIME*20.0)%50)/1200.0)*/
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"

[sub_resource type="StreamTexture" id=5]
flags = 4
load_path = "res://.import/sea-texture-1.jpg-b5549e6bb122aa33d2a79c4a541d0f8f.stex"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 4 )
shader_param/albedo = Color( 1, 1, 1, 0.219608 )
shader_param/specular = null
shader_param/metallic = null
shader_param/roughness = null
shader_param/point_size = 0.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = null
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = null
shader_param/texture_albedo = SubResource( 5 )

[sub_resource type="PlaneMesh" id=7]
material = SubResource( 6 )
size = Vector2( 200, 200 )
subdivide_width = 200
subdivide_depth = 200

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 3 )
material/0 = null

[node name="MeshInstance2" type="MeshInstance" parent="."]
mesh = SubResource( 7 )
material/0 = null
